#ifndef __PROFILER__H__
#define __PROFILER__H__

/*-------------------------------------------------------------------*/
// 프로파일러 기본 설정
//
// eMAX_THREAD_NAME		: 쓰레드 이름 최대 길이
// eMAX_SAMPLE			: 한 쓰레드의 최대 샘플 갯수
// eMAX_SAMPLE_THREAD	: 쓰레드의 최대 갯수
/*-------------------------------------------------------------------*/
enum e_CONFIG_PROFILER
{
	eMAX_SAMPLE_NAME	= 64,
	eMAX_SAMPLE			= 100,
	eMAX_THREAD_SAMPlE	= 50
};

///////////////////////////////////////////////////////////////////////
// 정보 수집할 단위 샘플
///////////////////////////////////////////////////////////////////////
struct st_SAMPLE
{
	bool				bUseFlag;

	WCHAR				wName[eMAX_SAMPLE_NAME];

	LARGE_INTEGER		liStartTime;

	double				dTotalSampleTime;

	double				dMaxTime[2];
	double				dMinTime[2];

	unsigned long		lCallCount;
};

///////////////////////////////////////////////////////////////////////
// 정보를 수집할 쓰레드 정보
//
// lThreadID : 쓰레드 ID
// pSample	 : 샘플 배열 포인터
///////////////////////////////////////////////////////////////////////
struct st_THREAD_SAMPLE
{
	DWORD				lThreadID;
	st_SAMPLE			*pSample;
};



///////////////////////////////////////////////////////////////////////
// 프로파일러 초기화
///////////////////////////////////////////////////////////////////////
bool					ProfileInit();

///////////////////////////////////////////////////////////////////////
// 프로파일링 시작
///////////////////////////////////////////////////////////////////////
bool					ProfileBegin(WCHAR *pwSampleName);

///////////////////////////////////////////////////////////////////////
// 프로파일링 끝
///////////////////////////////////////////////////////////////////////
bool					ProfileEnd(WCHAR *pwSampleName);



///////////////////////////////////////////////////////////////////////
// 프로파일링한 데이터 저장
///////////////////////////////////////////////////////////////////////
bool					SaveProfile();



///////////////////////////////////////////////////////////////////////
// 샘플 얻기
///////////////////////////////////////////////////////////////////////
bool					GetSample(WCHAR *pwSampleName, st_SAMPLE **pOutSample);

#endif



#ifdef PROFILE_CHECK
	#define PRO_BEGIN(X)	ProfileBegin(X)
	#define PRO_END(X)		ProfileEnd(X)
#else
	#define PRO_BEGIN(X)
	#define PRO_END(X)
#endif


/*-----------------------------------------------------------------------*/
// 멀티 스레드 프로파일러
/*-----------------------------------------------------------------------*/
/*
class CProfiler
{
private :
	enum e_CONFIG_PROFILER
	{
		eMAX_SAMPLE_NAME		= 64,
		eMAX_SAMPLE				= 100,
		eMAX_THREAD_SAMPlE		= 50
	};

	///////////////////////////////////////////////////////////////////////
	// 정보 수집할 단위 샘플
	///////////////////////////////////////////////////////////////////////
	struct st_SAMPLE
	{
		bool			bUseFlag;

		WCHAR			wName[eMAX_SAMPLE_NAME];

		LARGE_INTEGER	liStartTime;

		double			dTotalSampleTime;

		double			dMaxTime[2];
		double			dMinTime[2];

		int				iCallCount;
	};

	///////////////////////////////////////////////////////////////////////
	// 정보를 수집할 쓰레드 정보
	//
	// lThreadID : 쓰레드 ID
	// pSample	 : 샘플 배열 포인터
	///////////////////////////////////////////////////////////////////////
	struct st_THREAD_SAMPLE
	{
		DWORD			lThreadID;
		st_SAMPLE		*pSample;
	};



private :
	///////////////////////////////////////////////////////////////////////
	// 생성자
	///////////////////////////////////////////////////////////////////////
	CProfiler();

	///////////////////////////////////////////////////////////////////////
	// 소멸자
	///////////////////////////////////////////////////////////////////////
	virtual			~CProfiler();


	///////////////////////////////////////////////////////////////////////
	// 싱글톤 객체 포인터
	///////////////////////////////////////////////////////////////////////
	static CProfiler *_pProfiler;


public :
	///////////////////////////////////////////////////////////////////////
	// 싱글톤 객체 생성
	///////////////////////////////////////////////////////////////////////
	static CProfiler *GetInstance(void)
	{
		if (NULL == _pProfiler)
		{
			_pProfiler = new CProfiler;
			atexit(Destroy);
		}

		return _pProfiler;
	}
	

	///////////////////////////////////////////////////////////////////////
	// 객체 파괴
	///////////////////////////////////////////////////////////////////////
	static void Destroy(void)
	{
		delete _pProfiler;
	}


	///////////////////////////////////////////////////////////////////////
	// 프로파일링 시작
	///////////////////////////////////////////////////////////////////////
	bool			ProfileBegin(WCHAR *pwSampleName);

	///////////////////////////////////////////////////////////////////////
	// 프로파일링 끝
	///////////////////////////////////////////////////////////////////////
	bool			ProfileEnd(WCHAR *pwSampleName);



	///////////////////////////////////////////////////////////////////////
	// 프로파일링한 데이터 저장
	///////////////////////////////////////////////////////////////////////
	bool			SaveProfile();



private :
	///////////////////////////////////////////////////////////////////////
	// 샘플 얻기
	///////////////////////////////////////////////////////////////////////
	bool			GetSample(WCHAR *pwSampleName, st_SAMPLE **pOutSample);



private :
	///////////////////////////////////////////////////////////////////////
	// TLS 플래그 배열 인덱스
	///////////////////////////////////////////////////////////////////////
	DWORD					_dwTlsIndex;


	///////////////////////////////////////////////////////////////////////
	// 프로파일링할 대상 샘플
	///////////////////////////////////////////////////////////////////////
	st_THREAD_SAMPLE		_stProfileThread[eMAX_THREAD_SAMPlE];


	///////////////////////////////////////////////////////////////////////
	// 고해상도 타이머 값(CPU의 클럭 수)
	///////////////////////////////////////////////////////////////////////
	LARGE_INTEGER			_IFrequency;
	double					_dMicroFrequency;

	///////////////////////////////////////////////////////////////////////
	// 프로파일러 동기화 객체
	///////////////////////////////////////////////////////////////////////
	SRWLOCK					_srwProfilerLock;
};
*/