#ifndef __PROFILER__H__
#define __PROFILER__H__

/*-----------------------------------------------------------------------*/
// 멀티 스레드 프로파일러
/*-----------------------------------------------------------------------*/
class CProfiler
{
private :
	/*-------------------------------------------------------------------*/
	// 프로파일러 기본 설정
	//
	// eMAX_THREAD_NAME		: 쓰레드 이름 최대 길이
	// eMAX_SAMPLE			: 한 쓰레드의 최대 샘플 갯수
	// eMAX_SAMPLE_THREAD	: 쓰레드의 최대 갯수
	/*-------------------------------------------------------------------*/
	enum e_CONFIG_PROFILER
	{
		eMAX_SAMPLE_NAME		= 64,
		eMAX_SAMPLE				= 100,
		eMAX_THREAD_SAMPlE		= 100
	};

	///////////////////////////////////////////////////////////////////////
	// 정보 수집할 단위 샘플
	///////////////////////////////////////////////////////////////////////
	struct st_SAMPLE
	{
		WCHAR			wName[eMAX_SAMPLE_NAME];

		LARGE_INTEGER	liStartTime;

		double			dTotalSampleTime;

		double			dMaxTime[2];
		double			dMinTime[2];

		int				iCallCount;
	};

	///////////////////////////////////////////////////////////////////////
	// 정보를 수집할 쓰레드 정보
	//
	// lThreadID : 쓰레드 ID
	// stSample	 : 샘플 배열
	///////////////////////////////////////////////////////////////////////
	struct st_THREAD_SAMPLE
	{
		DWORD			lThreadID;
		st_SAMPLE		stSample[eMAX_SAMPLE];
	};



public :
	///////////////////////////////////////////////////////////////////////
	// 생성자
	///////////////////////////////////////////////////////////////////////
					CProfiler();

	///////////////////////////////////////////////////////////////////////
	// 소멸자
	///////////////////////////////////////////////////////////////////////
	virtual			~CProfiler();

	

	///////////////////////////////////////////////////////////////////////
	// 프로파일링 시작
	///////////////////////////////////////////////////////////////////////
	bool			ProfileBegin(WCHAR *pwSampleName);

	///////////////////////////////////////////////////////////////////////
	// 프로파일링 끝
	///////////////////////////////////////////////////////////////////////
	bool			ProfileEnd(WCHAR *pwSampleName);



	///////////////////////////////////////////////////////////////////////
	// 프로파일링한 데이터 저장
	///////////////////////////////////////////////////////////////////////
	bool			SaveProfile();



private :
	///////////////////////////////////////////////////////////////////////
	// 샘플 얻기
	///////////////////////////////////////////////////////////////////////
	bool			GetSample(WCHAR *pwSampleName, st_SAMPLE **pOutSample);


	///////////////////////////////////////////////////////////////////////
	// 쓰레드 샘플의 인덱스 반환
	///////////////////////////////////////////////////////////////////////
	int				GetThreadSampleIndex();



private :
	///////////////////////////////////////////////////////////////////////
	// 프로파일링할 대상 샘플
	///////////////////////////////////////////////////////////////////////
	st_THREAD_SAMPLE		_stProfileThread[eMAX_THREAD_SAMPlE];


	///////////////////////////////////////////////////////////////////////
	// 고해상도 타이머 값(CPU의 클럭 수)
	///////////////////////////////////////////////////////////////////////
	LARGE_INTEGER			_IFrequency;
	double					_dMicroFrequency;

	///////////////////////////////////////////////////////////////////////
	// 프로파일러 동기화 객체
	///////////////////////////////////////////////////////////////////////
	SRWLOCK					_srwProfilerLock;
};

#endif